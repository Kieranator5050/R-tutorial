rmarkdown::render(tutorial.rmd, params=list(symbol=GOOG))
rmarkdown::render('tutorial.rmd', params=list(symbol=GOOG))
rmarkdown::render('tutorial.rmd', params=list(symbol='GOOG'))
View(move)
knit_with_parameters("~/Github/R-tutorial/tutorial.Rmd")
knit_with_parameters("~/Github/R-tutorial/tutorial.Rmd")
rmarkdown::render('tutorial.rmd', params=list(symbol='GOOG'))
rmarkdown::render('R_Markdown\tutorial.rmd', params=list(symbol='GOOG'))
rmarkdown::render('R_Markdown\\tutorial.rmd', params=list(symbol='GOOG'))
knitr::opts_chunk$set(echo = TRUE)
b
q3 <- F
knitr::opts_chunk$set(echo = TRUE)
x <- 2L
typeof(x)
y <- 2.5
typeof(y)
z <- 3 + 2i
typeof(z)
a <- "h"
typeof(a)
q1 <- T
typeof(q1)
q2 <- TRUE
typeof(q2)
q3 <- F
q4 <- FALSE
b <- x+y
b
x <- 0
while(x<3){
x <- x + 1
x
}
x <- 0
while(x<3){
x <- x + 1
print(x)
}
for(i in 1:5){
print("Loop")
}
for(i in 2:5){
print("Loop")
}
```{r}
for(i in 1:5){
print(i)
}
answer #print
N <- 100 #Sample Size
counter <- 0 #Counter
for(i in rnorm(N)){ #Iterate over vector
if( i > -1 & i < 1 ){ #Check if i falls within range
counter <- counter + 1 #Increment
}
}
answer <- counter / N #Calculate hit-ratio
answer #print
N <- 1000 #Sample Size
counter <- 0 #Counter
for(i in rnorm(N)){ #Iterate over vector
if( i > -1 & i < 1 ){ #Check if i falls within range
counter <- counter + 1 #Increment
}
}
answer <- counter / N #Calculate hit-ratio
answer #print
N <- 10000 #Sample Size
counter <- 0 #Counter
for(i in rnorm(N)){ #Iterate over vector
if( i > -1 & i < 1 ){ #Check if i falls within range
counter <- counter + 1 #Increment
}
}
answer <- counter / N #Calculate hit-ratio
answer #print
N <- 1000000 #Sample Size
counter <- 0 #Counter
for(i in rnorm(N)){ #Iterate over vector
if( i > -1 & i < 1 ){ #Check if i falls within range
counter <- counter + 1 #Increment
}
}
answer <- counter / N #Calculate hit-ratio
answer #print
N <- 10 #Sample Size
counter <- 0 #Counter
for(i in rnorm(N)){ #Iterate over vector
if( i > -1 & i < 1 ){ #Check if i falls within range
counter <- counter + 1 #Increment
}
}
answer <- counter / N #Calculate hit-ratio
answer #print
N <- 100 #Sample Size
counter <- 0 #Counter
for(i in rnorm(N)){ #Iterate over vector
if( i > -1 & i < 1 ){ #Check if i falls within range
counter <- counter + 1 #Increment
}
}
answer <- counter / N #Calculate hit-ratio
answer #print
knitr::opts_chunk$set(echo = TRUE)
1:5
"a":"a"
1:5
1:5
numVector <- c(3,5,10,25,50)
is.numeric(numVector)
numVector <- c(3,5,10,25,50)
is.numeric(numVector)
is.integer(numVector)
is.double(numVector)
intVector <- c(1L, 2L, 5L)
is.integer(intVector)
charVector <- c("a", "B23", "Hello", 7)
charVector
numVector <- c(3,5,10,25,50)
is.numeric(numVector)
is.integer(numVector)
is.double(numVector)
intVector <- c(1L, 2L, 5L)
is.integer(intVector)
charVector <- c("a", "B23", "Hello", 7)
charVector
seq(1,15) # Use sequence instead of : to adjust different params such as step
1:15
seq(1,15,2)
rep(3, 10)
rep(3, 10) # Repeats an element
rep("c", 10)
rep(c(5,10), 10)
charVector <- c("a", "B23", "Hello", 7)
charVector
#Access individual elements using []
charVector[0]
charVector <- c("a", "B23", "Hello", 7)
charVector
#Access individual elements using []
charVector[1]
charVector <- c("a", "B23", "Hello", 7)
charVector
#Access individual elements using []
charVector[1]
charVector[-1]
charVector[1:3]
charVector[c(1,3,4)]
charVector[-2] # Elements execpt index
charVector <- c("a", "B23", "Hello", 7)
charVector
#Access individual elements using []
charVector[1]
charVector[-2] # Elements execpt index
charVector[1:3] # Choose range of indexes
charVector[c(1,3,4)] # Choose specific indexes
charVector <- c("a", "B23", "Hello", 7)
charVector
#Access individual elements using []
charVector[1]
charVector[-3] # Elements execpt index
charVector[1:3] # Choose range of indexes
charVector[c(1,3,4)] # Choose specific indexes
knitr::opts_chunk$set(echo = TRUE)
N <- 100
a <- rnorm(N)
b <- rnorm(N)
c <- a * b
N <- 100
a <- rnorm(N)
b <- rnorm(N)
c <- a * b
c
c <- a * b
knitr::opts_chunk$set(echo = TRUE)
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
profit <- revenue - expenses
profit
tax <- round(0.30 * profit, 2)
tax
profit.after.tax <- profit - tax
profit.after.tax
profit.margin <- round(profit.after.tax / revenue, 2) * 100
profit.margin
profit.margin <- round(profit.after.tax / revenue, 2)
profit.margin
profit.margin <- round(profit.after.tax / revenue, 2) * 100
profit.margin
mean_pat <- mean(profit.after.tax)
mean_pat
good.months <- profit.after.tax > mean_pat
good.months
bad.months <- !good.months
bad.months
best.month <- profit.after.tax == max(profit.after.tax)
best.month
profit.after.tax <- profit - tax
profit.after.tax
worst.month <- profit.after.tax == min(profit.after.tax)
worst.month
revenue.1000 <- round(revenue / 1000, 0)
expenses.1000 <- round(expenses / 1000, 0)
profit.1000 <- round(profit / 1000, 0)
profit.after.tax.1000 <- round(profit.after.tax / 1000, 0)
#Data
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
#Solution
#Calculate Profit As The Differences Between Revenue And Expenses
profit <- revenue - expenses
profit
#Calculate Tax As 30% Of Profit And Round To 2 Decimal Points
tax <- round(0.30 * profit, 2)
tax
#Calculate Profit Remaining After Tax Is Deducted
profit.after.tax <- profit - tax
profit.after.tax
#Calculate The Profit Margin As Profit After Tax Over Revenue
#Round To 2 Decimal Points, Then Multiply By 100 To Get %
profit.margin <- round(profit.after.tax / revenue, 2) * 100
profit.margin
#Calculate The Mean Profit After Tax For The 12 Months
mean_pat <- mean(profit.after.tax)
mean_pat
#Find The Months With Above-Mean Profit After Tax
good.months <- profit.after.tax > mean_pat
good.months
#Bad Months Are The Opposite Of Good Months !
bad.months <- !good.months
bad.months
#The Best Month Is Where Profit After Tax Was Equal To The Maximum
best.month <- profit.after.tax == max(profit.after.tax)
best.month
#The Worst Month Is Where Profit After Tax Was Equal To The Minimum
worst.month <- profit.after.tax == min(profit.after.tax)
worst.month
#Convert All Calculations To Units Of One Thousand Dollars
revenue.1000 <- round(revenue / 1000, 0)
expenses.1000 <- round(expenses / 1000, 0)
profit.1000 <- round(profit / 1000, 0)
profit.after.tax.1000 <- round(profit.after.tax / 1000, 0)
#Print Results
revenue.1000
expenses.1000
profit.1000
profit.after.tax.1000
profit.margin
good.months
bad.months
best.month
worst.month
#Matrix
M <- rbind(
revenue.1000,
expenses.1000,
profit.1000,
profit.after.tax.1000,
profit.margin,
good.months,
bad.months,
best.month,
worst.month
)
#Print The Matrix
M
View(prices)
